package com.llmagent.llm.output;

import java.util.List;
import java.util.Objects;

/**
 * Represents the response from various types of models, including language, chat, embedding, and moderation models.
 * This class encapsulates the generated content, token usage statistics, and finish reason.
 *
 * @param <T> The type of content generated by the model.
 */
public class LlmResponse<T> {

    private final T content;
    private final TokenUsage tokenUsage;
    private final MultimodalTokenUsage multimodalTokenUsage;
    private final FinishReason finishReason;

    private final List<RetrieverResources> retrieverResources;

    /**
     * Create a new Response.
     *
     * <p>Will contain {@code null} {@code TokenUsage} and {@code FinishReason}</p>
     *
     * @param content the content to wrap.
     */
    public LlmResponse(T content) {
        this(content, null, null, null,null);
    }

    public LlmResponse(T content, TokenUsage tokenUsage, FinishReason finishReason, List<RetrieverResources> retrieverResources, MultimodalTokenUsage multimodalTokenUsage) {
        this.content = content;
        this.tokenUsage = tokenUsage;
        this.finishReason = finishReason;
        this.retrieverResources = retrieverResources;
        this.multimodalTokenUsage = multimodalTokenUsage;
    }

    /**
     * Create a new Response.
     *
     * @param content the content to wrap.
     * @param tokenUsage the token usage statistics, or {@code null}.
     * @param finishReason the finish reason, or {@code null}.
     */
    public LlmResponse(T content, TokenUsage tokenUsage, FinishReason finishReason, List<RetrieverResources> retrieverResources) {
        this(content, tokenUsage, finishReason, retrieverResources, null);
    }

    /**
     * Create a new Response.
     *
     * @param content the content to wrap.
     * @param tokenUsage the token usage statistics, or {@code null}.
     * @param finishReason the finish reason, or {@code null}.
     */
    public LlmResponse(T content, MultimodalTokenUsage tokenUsage, FinishReason finishReason, List<RetrieverResources> retrieverResources) {
        this(content, null, finishReason, retrieverResources, tokenUsage);
    }

    /**
     * Get the content.
     * @return the content.
     */
    public T content() {
        return content;
    }

    /**
     * Get the token usage statistics.
     * @return the token usage statistics, or {@code null}.
     */
    public TokenUsage tokenUsage() {
        return tokenUsage;
    }

    /**
     * Get the finish reason.
     * @return the finish reason, or {@code null}.
     */
    public FinishReason finishReason() {
        return finishReason;
    }

    public List<RetrieverResources> retrieverResources() {
        return retrieverResources;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        LlmResponse<?> that = (LlmResponse<?>) o;
        return Objects.equals(this.content, that.content)
                && Objects.equals(this.tokenUsage, that.tokenUsage)
                && Objects.equals(this.finishReason, that.finishReason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(content, tokenUsage, finishReason);
    }

    @Override
    public String toString() {
        return "Response {" +
                " content = " + content +
                ", tokenUsage = " + tokenUsage +
                ", finishReason = " + finishReason +
                " }";
    }

    /**
     * Create a new Response.
     * @param content the content to wrap.
     * @return the new Response.
     * @param <T> the type of content.
     */
    public static <T> LlmResponse<T> from(T content) {
        return new LlmResponse<>(content);
    }

    /**
     * Create a new Response.
     * @param content the content to wrap.
     * @param tokenUsage the token usage statistics.
     * @return the new Response.
     * @param <T> the type of content.
     */
    public static <T> LlmResponse<T> from(T content, TokenUsage tokenUsage) {
        return new LlmResponse<>(content, tokenUsage, null, null);
    }

    /**
     * Create a new Response.
     * @param content the content to wrap.
     * @param tokenUsage the token usage statistics.
     * @param finishReason the finish reason.
     * @return the new Response.
     * @param <T> the type of content.
     */
    public static <T> LlmResponse<T> from(T content, TokenUsage tokenUsage, FinishReason finishReason) {
        return new LlmResponse<>(content, tokenUsage, finishReason, null);
    }

    public static <T> LlmResponse<T> from(T content, TokenUsage tokenUsage, List<RetrieverResources> retrieverResources) {
        return new LlmResponse<>(content, tokenUsage, null, retrieverResources);
    }

    public static <T> LlmResponse<T> from(T content, MultimodalTokenUsage tokenUsage) {
        return new LlmResponse<>(content, tokenUsage, null, null);
    }
}
